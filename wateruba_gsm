/*
  WriteMultipleFields
  
  Description: Writes values to fields 1,2,3,4 and status in a single ThingSpeak update every 20 seconds.
  
  Hardware: Arduino MKR GSM 1400
  
  !!! IMPORTANT - Modify the secrets.h file for this project with your network connection and ThingSpeak channel details. !!!
  
  Note:
  - Requires MKRGSM library.
  - Reqires GSM access (SIM card or credentials).
  
  ThingSpeak ( https://www.thingspeak.com ) is an analytic IoT platform service that allows you to aggregate, visualize, and 
  analyze live data streams in the cloud. Visit https://www.thingspeak.com to sign up for a free account and create a channel.  
  
  Documentation for the ThingSpeak Communication Library for Arduino is in the README.md folder where the library was installed.
  See https://www.mathworks.com/help/thingspeak/index.html for the full ThingSpeak documentation.
  
  For licensing information, see the accompanying license file.
  
  Copyright 2020, The MathWorks, Inc.
*/
#include <Wire.h>
#include <MKRGSM.h>
#include "secrets.h"
#include "ThingSpeak.h" // always include thingspeak header file after other header files and custom macros

#define addressPH 99               //default I2C ID number for EZO pH Circuit.
#define addressDO 97               //default I2C ID number for EZO DO Circuit.
#define addressT 102              //default I2C ID number for EZO RTD Circuit.

// PIN Number
const char PINNUMBER[]     = SECRET_PIN;
// APN data
const char GPRS_APN[]      = SECRET_GPRS_APN;
const char GPRS_LOGIN[]    = SECRET_GPRS_LOGIN;
const char GPRS_PASSWORD[] = SECRET_GPRS_PASS;

GSMClient client;
GPRS gprs;
GSM gsmAccess;

unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;

byte code = 0;                   //used to hold the I2C response code.
char I2C_data[20];               //we make a 20 byte character array to hold incoming data from the I2C circuit.
byte in_char = 0;                //used as a 1 byte buffer to store in bound bytes from the I2C Circuit.
byte i = 0;                      //counter used for I2C_data array.
int time_ = 815;                 //used to change the delay needed depending on the command sent to the EZO Class I2C Circuit. (600 for RTD, 815 for PH, 575 for DO)
float data_float;                //float var used to hold the float value of the I2C.
char T_cal[4];                   //variable used to calibrate DO sensor based on temperature
char *do_data;                   //char pointer used in string parsing.
char *sat_data;                  //char pointer used in string parsing.

// variables to hold our data
float PH;
float DO;
float T;

void setup() {
  Serial.begin(115200);  //Initialize serial
  Wire.begin();                 //enable I2C port
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo native USB port only
  }
  
  Serial.println("Starting Arduino web client.");
  boolean connected = false;

  // wait 10 seconds for connection:
  delay(10000);
  
  while (!connected) {
    if ((gsmAccess.begin(PINNUMBER) == GSM_READY) &&
      (gprs.attachGPRS(GPRS_APN, GPRS_LOGIN, GPRS_PASSWORD) == GPRS_READY)) {
      connected = true;
    } else {
      Serial.println("Not connected");
      delay(1000);
    }
  }

  Serial.println("connected");
  
  ThingSpeak.begin(client);  // Initialize ThingSpeak 
}

void loop() {

  PH = i2cRead(addressPH);    //acidity
  DO = i2cRead(addressDO);    //dissolved oxygen
  T = i2cRead(addressT);      //temperature
  
  // set the fields with the values
  ThingSpeak.setField(1, String(PH,2));
  ThingSpeak.setField(2, String(DO,2));
  ThingSpeak.setField(3, String(T,2));
  
  // write to the ThingSpeak channel 
  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if(x == 200){
    Serial.println("Channel update successful.");
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }
  
  delay(20000); // Wait 20 seconds to update the channel again
}

// function for reading data from sensors through I2C, works with all three sensors
float i2cRead(int address) {
        
    Wire.beginTransmission(address);           //call the circuit by its ID number.
    Wire.write('r');                       //the command to read data from I2C Atlas sensors.
    Wire.endTransmission();                   //end the I2C data transmission.
    delay(time_);                            //wait the correct amount of time for the circuit to complete its instruction.
    Wire.requestFrom(address, 20, 1);       //call the circuit and request 20 bytes (this may be more than we need)
    code = Wire.read();                    //the first byte is the response code, we read this separately.
    while (Wire.available()) {            //are there bytes to receive.
      in_char = Wire.read();              //receive a byte.
      I2C_data[i] = in_char;              //load this byte into our array.
      i += 1;                             //incur the counter for the array element.
      if (in_char == 0) {                 //if we see that we have been sent a null command.
        i = 0;                            //reset the counter i to 0.
        break;                            //exit the while loop.
      }
    }
    if (address==addressDO) {
      do_data = strtok(I2C_data, ",");
      sat_data = strtok(NULL, ",");
      data_float = atof(do_data);
    } else {      
      data_float = atof(I2C_data);
    }
    return data_float;
}
